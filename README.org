#+TITLE:  ELISA: An ELISA Plate Reader Application
#+DATE:    December 21, 2019
#+SINCE:   {replace with next tagged release version}
#+STARTUP: inlineimages

* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#module-flags][Module Flags]]
  - [[#plugins][Plugins]]
  - [[#hacks][Hacks]]
- [[#roadmap][Roadmap]]
  - [[#detect-the-elisa-plate][Detect the ELISA Plate]]
  - [[#read-vials][Read Vials]]
  - [[#normalize-color][Normalize Color]]
  - [[#feedback][Feedback]]
- [[#questions-for-end-user][Questions (for end user)]]
- [[#configuration][Configuration]]
  - [[#react-native-configuration][React Native Configuration]]
- [[#troubleshooting][Troubleshooting]]

* Description
This application seeks to be the best way to scan ELISA plates and record
measurements.

It's able to scan a plate and record the RGB values of each individual vial
while compensating for differences in lighting and camera.

** Module Flags
This module provides no flags.

** Plugins
{A list of linked plugins}

** Hacks
{A list of internal modifications to included packages}

* Roadmap
** Detect the ELISA Plate
The application should be able to detect the plate without reading from external
sources.
It would be a good idea to show the user taking the photo that the plate has
been detected so as to avoid taking a blurry photo and seeing skewed results.
** Read Vials
The application should be able to take some image of the plate and identify each
of the individual vials on the plate.

It should record the RGB values in some standardized format.
** Normalize Color
The application should (ideally) be able to normalize the color values of the
plate to be able to obtain an accurate reading of the color values.
** Feedback
It would be useful to the researchers to provide an interface through the
application to view normalized pictures of plates and view the RGB readings as
labels of some sort corresponding to each vial through the application.

It would also be useful to store this information in a human-interpretable
table, likely in .csv format, and to be able to back up and/or export this
information.
* Questions (for end user)
- How would you like the information displayed?
  We should prepare several suggestions and diagrams for this when initially
  meeting with the researcher. How they view the data for the readings is just
  as important as their ability to record the readings through our application;
  if they are not able to view the results, they have gotten nothing!
- What information do you need?
  e.g. RGB values, original image of the plate, normalized image of the plate
- Will you be able to use the same smartphone for each reading?
- Could this smartphone be an Android smartphone?
  (We can develop a React Native cross-platform application or a native Android
  application)
- Will the lighting condition be consistent?
  It's much more difficult to obtain consistent readings if we cannot rely upon
  consistent lighting conditions. Normalizing the lighting is an interesting
  problem, but may fall outside of the scope of this project.
* TODO Configuration
How to configure this module, including common problems and how to address them.
** React Native Configuration
1. Install node, npm and yarn on your system.
   For me, this was ~pacman -S node~ and ~npm install -g yarn~.
2. Install react-native. ~yarn global add react-native~
3. Install android studio. ~trizen android-studio~
4. Install OpenJDK 8 and adb. ~pacman -S jre8-openjdk adb~
5. Configure the emulator.
   a. Open ELIZA/eliza/android in Android Studio.
   b. Click on the icon depicting an android phone next to the android logo.
   This is the Android AVD manager.
   c. Select Create Virtual Device, then select the device to create. I went
   with the Pixel 3; other devices are untested.
   b. Proceed to the software selection (click 'next') and select the Android
   Pie system image. This is necessary for compatibility with react native.
   d. Verify the configuration and you're done!

* TODO Troubleshooting
Common issues and their solution, or places to look for help.
